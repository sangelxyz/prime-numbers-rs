use std::io::BufReader;

use tokio_uring::fs::File;
use tokio::io::BufReader;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    tokio_uring::start(async {
        // Open a file
        let file = File::open("test.txt").await?;
        let buf = BufReader::new(file)?;
        //let buf = bufReader::new(file);
        //let buf = vec![0; 4096];
        // Read some data, the buffer is passed by ownership and
        // submitted to the kernel. When the operation completes,
        // we get the buffer back.
        //let (res, buf) = file.read_at(buf, 0).await;
        //let n = res?;
        // Display the contents
        //println!("{:?}", &buf[..n]);

        Ok(())
    })
}

fn is_prime(num: u32) -> bool {
    if num < 2 {
        return false;
    }
    for i in 2..(num / 2 + 1) {
        if num % i == 0 {
            return false;
        }
    }	
    return true;
}

fn calc_prime(num: u32) -> (u32, u32) {
	for i in 2..num {
		if is_prime(i) && num%i == 0 {
			return(i, num / i);
		}
	}
	return(1, num);
}
